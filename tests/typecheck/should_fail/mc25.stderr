
mc25.hs:9:15:
    No instance for (Enum t0)
      arising from the arithmetic sequence `1 .. 10'
    The type variable `t0' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Enum Double -- Defined in `GHC.Float'
      instance Enum Float -- Defined in `GHC.Float'
      instance Integral a => Enum (GHC.Real.Ratio a)
        -- Defined in `GHC.Real'
      ...plus 7 others
    In a stmt of a monad comprehension: x <- [1 .. 10]
    In a stmt of a monad comprehension: then group by x using take
    In the expression: [x | x <- [1 .. 10], then group by x using take]

mc25.hs:9:16:
    No instance for (Num t0) arising from the literal `1'
    The type variable `t0' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Num Double -- Defined in `GHC.Float'
      instance Num Float -- Defined in `GHC.Float'
      instance Integral a => Num (GHC.Real.Ratio a)
        -- Defined in `GHC.Real'
      ...plus three others
    In the expression: 1
    In a stmt of a monad comprehension: x <- [1 .. 10]
    In a stmt of a monad comprehension: then group by x using take

mc25.hs:9:24:
    No instance for (Functor t1) arising from a use of `fmap'
    The type variable `t1' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Functor ((,) a) -- Defined in `GHC.Base'
      instance Functor ((->) r) -- Defined in `GHC.Base'
      instance Functor IO -- Defined in `GHC.Base'
      ...plus one other
    In the expression: fmap
    In a stmt of a monad comprehension: then group by x using take
    In the expression: [x | x <- [1 .. 10], then group by x using take]

mc25.hs:9:46:
    Couldn't match type `Int' with `a -> t0'
    Expected type: (a -> t0) -> [a] -> [t1 a]
      Actual type: Int -> [a] -> [a]
    In the expression: take
    In a stmt of a monad comprehension: then group by x using take
    In the expression: [x | x <- [1 .. 10], then group by x using take]
