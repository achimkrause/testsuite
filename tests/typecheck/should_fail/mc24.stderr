
mc24.hs:9:14:
    No instance for (Enum a1)
      arising from the arithmetic sequence `1 .. 10'
    The type variable `a1' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Enum Double -- Defined in `GHC.Float'
      instance Enum Float -- Defined in `GHC.Float'
      instance Integral a => Enum (GHC.Real.Ratio a)
        -- Defined in `GHC.Real'
      ...plus 7 others
    In a stmt of a monad comprehension: x <- [1 .. 10]
    In a stmt of a monad comprehension: then group by x using take 2
    In the expression:
      [length x | x <- [1 .. 10], then group by x using take 2]

mc24.hs:9:15:
    No instance for (Num a1) arising from the literal `1'
    The type variable `a1' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Num Double -- Defined in `GHC.Float'
      instance Num Float -- Defined in `GHC.Float'
      instance Integral a => Num (GHC.Real.Ratio a)
        -- Defined in `GHC.Real'
      ...plus three others
    In the expression: 1
    In a stmt of a monad comprehension: x <- [1 .. 10]
    In a stmt of a monad comprehension: then group by x using take 2

mc24.hs:10:9:
    No instance for (Monad t0)
      arising from a statement in a monad comprehension
    The type variable `t0' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Monad ((->) r) -- Defined in `GHC.Base'
      instance Monad IO -- Defined in `GHC.Base'
      instance Monad [] -- Defined in `GHC.Base'
    In a stmt of a monad comprehension: then group by x using take 2
    In the expression:
      [length x | x <- [1 .. 10], then group by x using take 2]
    In an equation for `foo':
        foo = [length x | x <- [1 .. 10], then group by x using take 2]

mc24.hs:10:31:
    Couldn't match type `[a0]' with `a -> a1'
    Expected type: (a -> a1) -> [a] -> t0 [a]
      Actual type: [a0] -> [a0]
    In the return type of a call of `take'
    Probable cause: `take' is applied to too many arguments
    In the expression: take 2
    In a stmt of a monad comprehension: then group by x using take 2
